import { GraphQLObjectType } from 'graphql';
import { BuildSchemaOptions } from '../../interfaces';
import { ObjectTypeMetadata } from '../metadata/object-type.metadata';
import { TypeFieldsAccessor } from '../services/type-fields.accessor';
import { TypeDefinitionsStorage } from '../storages/type-definitions.storage';
import { ArgsFactory } from './args.factory';
import { AstDefinitionNodeFactory } from './ast-definition-node.factory';
import { OutputTypeFactory } from './output-type.factory';
export interface ObjectTypeDefinition {
    target: Function;
    type: GraphQLObjectType;
    isAbstract: boolean;
}
export declare class ObjectTypeDefinitionFactory {
    private readonly typeDefinitionsStorage;
    private readonly outputTypeFactory;
    private readonly argsFactory;
    private readonly typeFieldsAccessor;
    private readonly astDefinitionNodeFactory;
    constructor(typeDefinitionsStorage: TypeDefinitionsStorage, outputTypeFactory: OutputTypeFactory, argsFactory: ArgsFactory, typeFieldsAccessor: TypeFieldsAccessor, astDefinitionNodeFactory: AstDefinitionNodeFactory);
    create(metadata: ObjectTypeMetadata, options: BuildSchemaOptions): {
        target: Function;
        isAbstract: boolean;
        type: GraphQLObjectType<any, any, {
            [key: string]: any;
        }>;
    };
    private generateInterfaces;
    private generateFields;
}
